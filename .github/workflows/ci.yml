name: CI Pipeline

on:
  push:
    branches:
      - integration
  pull_request:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    name: db-test
    runs-on: ubuntu-latest
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}

    services:
      db:
        image: postgres:latest

        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm install --prefix ./tests

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h ${{ secrets.DB_HOST }} -p 5432 -U ${{ secrets.DB_USER }}; do
            echo "Waiting for postgres to be ready..."
            sleep 1
          done

      - name: Run Database Migrations
        run: |
          psql -h ${{ secrets.DB_HOST }} -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -f ./schema/create_tables.sql

      - name: Run Tests
        run: npm test --prefix ./tests

  merge:
    if: success()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: integration
          fetch-depth: 0

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get the latest commit message from integration
        id: get_commit_message
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "commit_message=$LAST_COMMIT_MSG" >> $GITHUB_ENV

      - name: Checkout master branch
        run: git checkout master

      - name: Rebase integration branch onto master
        run: git rebase integration

      - name: Push changes to master
        run: git push origin master --force-with-lease
